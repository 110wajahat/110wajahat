{"version":3,"file":"static/js/302.fe55a3de.chunk.js","mappings":"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","sources":["Screens/Field/RegularTables/Examples/TableHover.js","Screens/Field/RegularTables/index.js","Screens/Field/index.js"],"sourcesContent":["import React from 'react';\nimport { Table } from 'reactstrap';\n\nexport default class TableHover extends React.Component {\n\n  data = [\n    {\n      id: 1,\n      date: \"28/8/2023\",\n      client: \"John\",\n      type: \"Some type\"\n    },\n    {\n      id: 1,\n      date: \"28/8/2023\",\n      client: \"John\",\n      type: \"Some type\"\n    },\n    {\n      id: 1,\n      date: \"28/8/2023\",\n      client: \"John\",\n      type: \"Some type\"\n    }, {\n      id: 1,\n      date: \"28/8/2023\",\n      client: \"John\",\n      type: \"Some type\"\n    },\n  ]\n\n  renderRows = () => {\n    return this.data.map(v => {\n      return (\n        <tr onClick={() => {\n          if (this.props.onPress) {\n            this.props.onPress()\n          }\n        }} >\n          <th scope=\"row\">{v.id}</th>\n          <td>{v.date}</td>\n          <td>{v.client}</td>\n          <td>{v.type}</td>\n        </tr>\n      )\n    })\n\n  }\n\n  render() {\n    return (\n      <Table hover className=\"mb-0\">\n        <thead>\n          <tr>\n            <th>Job ID</th>\n            <th>Approval Date</th>\n            <th>Client Name</th>\n            <th>Confirmation Type</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.renderRows()}\n        </tbody>\n      </Table>\n    );\n  }\n}\n","import React, { Fragment, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport {\n    Row, Col,\n    Card, CardBody,\n    CardTitle,\n    NavLink\n} from 'reactstrap';\n\nimport PageTitle from '../../../Layout/AppMain/PageTitle';\nimport TableHover from './Examples/TableHover';\nimport AddInvoiceModal from '../../Components/Modal/AddInvoiceModal';\nimport AddProposalModal from '../../Components/Modal/AddProposalModal';\nimport EditProposalModal from '../../Components/Modal/EditProposalModal';\n\n\nconst RegularTables = (props) => {\n\n    const [show, setshow] = useState(\"all\")\n\n    var addProposalRef = null;\n    var editProposalRef = null;\n\n   const getHeading = () => {\n        if(show == \"all\"){\n            return \"Field Tracker\";\n        }\n        else if(show == \"assigned\"){\n            return \"Assigned\";\n        }\n        else if(show == \"in\"){\n            return \"In Field\";\n        }\n        else if(show == \"completed\"){\n            return \"Completed\";\n        }\n    }\n\n    return (\n        <Fragment>\n            <TransitionGroup>\n                <CSSTransition component=\"div\" appear={true}\n                    timeout={0} enter={false} exit={false}>\n                    <div>\n                        <AddProposalModal ref={r => addProposalRef = r} />\n                        <EditProposalModal ref={r => editProposalRef = r} />\n                        <PageTitle\n                            heading={getHeading()}\n                            // subheading=\"Tables are the backbone of almost all web applications.\"\n                            icon=\"pe-7s-drawer icon-gradient bg-happy-itmeo\"\n                            onAddPress={() => {\n                                addProposalRef.toggle()\n                            }}\n                        />\n                        <div>\n                            <Row>\n                                {(show == \"all\"  || show == \"assigned\") && <Col lg=\"12\">\n                                    <Card className=\"main-card mb-3\">\n                                        <CardBody>\n                                            <div class=\"d-flex flex-row justify-content-between\" >\n                                                <CardTitle>Assigned</CardTitle>\n                                                    {show != \"all\"?<NavLink onClick={()=>{setshow(\"all\")}} href=\"#\">View All</NavLink>:<NavLink onClick={()=>{setshow(\"assigned\")}} href=\"#\">View More</NavLink>}\n                                            </div>\n                                            <TableHover onPress={()=>{\n                                                editProposalRef.toggle()\n                                            }} />\n                                        </CardBody>\n                                    </Card>\n                                </Col>}\n                                {(show == \"all\"  || show == \"in\") && <Col lg=\"12\">\n                                    <Card className=\"main-card mb-3\">\n                                        <CardBody>\n                                        <div class=\"d-flex flex-row justify-content-between\" >\n                                                <CardTitle>In Field</CardTitle>\n                                                {show != \"all\"?<NavLink onClick={()=>{setshow(\"all\")}} href=\"#\">View All</NavLink>:<NavLink onClick={()=>{setshow(\"in\")}} href=\"#\">View More</NavLink>}\n                                            </div>\n                                            <TableHover onPress={()=>{\n                                                editProposalRef.toggle()\n                                            }} />\n                                        </CardBody>\n                                    </Card>\n                                </Col>}\n                                {(show == \"all\"  || show == \"completed\") &&<Col lg=\"12\">\n                                    <Card className=\"main-card mb-3\">\n                                        <CardBody>\n                                        <div class=\"d-flex flex-row justify-content-between\" >\n                                                <CardTitle>Completed</CardTitle>\n                                                {show != \"all\"?<NavLink onClick={()=>{setshow(\"all\")}} href=\"#\">View All</NavLink>:<NavLink onClick={()=>{setshow(\"completed\")}} href=\"#\">View More</NavLink>}\n                                            </div>\n                                            <TableHover onPress={()=>{\n                                                editProposalRef.toggle()\n                                            }} />\n                                        </CardBody>\n                                    </Card>\n                                </Col>}\n                            </Row>\n                        </div>\n                    </div>\n                </CSSTransition>\n            </TransitionGroup>\n        </Fragment>\n    );\n};\n\nexport default RegularTables;\n","import React, {Fragment} from 'react';\nimport {Route} from 'react-router-dom';\n\n\nimport RegularTables from './RegularTables';\n\n// Layout\n\nimport AppHeader from '../../Layout/AppHeader';\nimport AppSidebar from '../../Layout/AppSidebar';\nimport AppFooter from '../../Layout/AppFooter';\n\nconst Field = ({match}) => {\n    \n    return(\n    <Fragment>\n        <AppHeader/>\n        <div className=\"app-main\">\n            <AppSidebar/>\n            <div className=\"app-main__outer\">\n                <div className=\"app-main__inner\">\n\n                    {/* Tables */}\n\n                    <Route path={`${match.url}`} component={RegularTables}/>\n                </div>\n                {/* <AppFooter/> */}\n            </div>\n        </div>\n    </Fragment>\n);\n}\nexport default Field;"],"names":["TableHover","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","data","id","date","client","type","renderRows","map","v","_jsxs","onClick","props","onPress","children","_jsx","scope","_createClass","key","value","Table","hover","className","this","React","_useState","useState","_useState2","_slicedToArray","show","setshow","addProposalRef","editProposalRef","Fragment","TransitionGroup","CSSTransition","component","appear","timeout","enter","exit","AddProposalModal","ref","r","EditProposalModal","PageTitle","heading","icon","onAddPress","toggle","Row","Col","lg","Card","CardBody","class","CardTitle","NavLink","href","_ref","match","AppHeader","AppSidebar","Route","path","url","RegularTables"],"sourceRoot":""}